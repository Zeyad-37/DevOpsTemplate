apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'jacoco-android'
apply plugin: 'com.uber.infer.android'
//apply plugin: 'pl.droidsonroids.pitest'

//apply from: "$project.rootDir/tools/script-git-version.gradle"
apply from: "$project.rootDir/tools/script-check-style.gradle"
apply from: "$project.rootDir/tools/script-findbugs.gradle"
apply from: "$project.rootDir/tools/script-lint.gradle"
apply from: "$project.rootDir/tools/script-pmd.gradle"
apply from: "$project.rootDir/tools/script-java-code-coverage.gradle"
apply from: "$project.rootDir/tools/script-java-doc.gradle"
apply from: "$project.rootDir/tools/script-pitest.gradle"
apply from: "$project.rootDir/tools/script-infer.gradle"

android {
    compileSdkVersion 27
    buildToolsVersion "26.0.2"

    defaultConfig {
        applicationId "com.dd.template"
        minSdkVersion 18
        targetSdkVersion 27
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword KEY_PASSWORD
            storePassword KEYSTORE_PASSWORD
            storeFile file('../keystore/debug.keystore')
        }
        release {
            keyAlias 'androiddebugkey'
            keyPassword KEY_PASSWORD
            storePassword KEYSTORE_PASSWORD
            storeFile file('../keystore/release.keystore')
        }
    }
    flavorDimensions "dev", "prod"
    productFlavors {
        dev {
            signingConfig signingConfigs.debug
//            versionCode gitVersionCodeTime
            versionCode 1
//            versionName gitVersionName
            versionName "1.0.0"
            applicationId "com.dd.template.dev"
            dimension "dev"
        }

        prod {
            signingConfig signingConfigs.release
            //            versionCode gitVersionCodeTime
            versionCode 1
//            versionName gitVersionName
            versionName "1.0.0"
            applicationId "com.dd.template"
            dimension "prod"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), "$project.rootDir/tools/rules-proguard.pro"
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), "$project.rootDir/tools/rules-proguard-debug.pro"
            signingConfig signingConfigs.debug
        }
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'  // butterknife
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/rxjava.properties'
    }

    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', 'src/androidTest/java/com/zeyad/usecases/app/assets/']
        }
    }

    jacocoAndroidUnitTestReport {
        excludes += ['**/AutoValue_*.*', '**/*JavascriptBridge.class']
        csv.enabled false
        html.enabled true
        xml.enabled false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation("com.android.support:design:$supportLibrary")

    implementation 'nl.littlerobots.rxlint:rxlint:1.4'

    // Testing
    testImplementation 'junit:junit:4.12'
    testImplementation "com.android.support:support-annotations:$supportLibrary"
    testImplementation "org.mockito:mockito-core:1.10.19"
    testImplementation "org.robolectric:robolectric:$robolectric"
    testImplementation "org.robolectric:shadows-support-v4:$robolectric"

    testImplementation "org.powermock:powermock-module-junit4:$powerMock"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMock"
    testImplementation "org.powermock:powermock-api-mockito:$powerMock"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMock"

    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    testImplementation 'com.github.andrzejchm.RESTMock:android:0.2.2'
    //required to resolve robolectric test problems
    testImplementation("com.jakewharton.espresso:okhttp3-idling-resource:$okhttpIdelingResource") {
        exclude group: 'com.android.support'
    }
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    androidTestCompile "com.android.support.test:runner:$androidSupportTest"
    androidTestCompile "com.android.support.test:rules:$androidSupportTest"
    androidTestCompile "com.android.support:support-annotations:$supportLibrary"
    androidTestCompile "com.android.support.test.espresso:espresso-core:$espressoCore"
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile('com.jakewharton.espresso:okhttp3-idling-resource:1.0.0') {
        exclude group: 'com.android.support'
    }
    androidTestCompile 'com.squareup.okhttp3:mockwebserver:3.8.0'
    androidTestCompile 'com.github.andrzejchm.RESTMock:android:0.1.4'
}

apply plugin: "net.ltgt.errorprone"